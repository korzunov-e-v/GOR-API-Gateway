stages:
  - linting
  - deploy

pylint:
  stage: linting
  image: python:3.10-slim
  before_script:
    - mkdir -p public/badges
    - echo undefined > public/badges/$CI_JOB_NAME.score
  script:
    - pip install pylint --quiet
    - pip install anybadge
    - ls -a
    - pylint --rcfile=.pylintrc --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee pylint.txt
    - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt > public/badges/$CI_JOB_NAME.score)
    - echo 'Pylint score was $score'
  after_script:
    - anybadge --overwrite --label=$CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 2=red 4=orange 8=yellow 10=green
  artifacts:
    paths:
      - public

mypy:
  stage: linting
  image: python:3.9-slim
  script:
    - pip install mypy --quiet
    - ls -a
    - mypy --install-types --non-interactive .

flake8:
  stage: linting
  image: python:3.9-slim
  before_script:
    - pip install flake8
    - pip install flake8-print
  script:
    - flake8

deploy-test:
  stage: deploy
  tags:
    - deploy-test
  when: manual
  script:
    - docker stop $APP || true
    - docker rm $APP || true
    - docker rmi -f $APP:$CI_COMMIT_BRANCH || true
    - docker-compose -f docker-compose.yml down || true
    - docker-compose -f docker-compose.yml up --force-recreate -d
    - docker network connect net_postgre $APP
    - docker network connect gor-dev $APP

#cleanup-test:
#  stage: cleanup
#  tags:
#    - deploy-test
#  script:
#    - docker system prune -f --filter "label!=keep"
#  when: always
